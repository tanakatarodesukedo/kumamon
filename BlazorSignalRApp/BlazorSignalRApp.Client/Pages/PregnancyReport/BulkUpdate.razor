@page "/pregnancyReport/bulkUpdate"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>妊娠等報告書 一括更新</PageTitle>

<div class="form-group">
    <label>
        対象件数:
        <input @bind="userInput" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">実行</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = [];
    private int? userInput;

    protected override async Task OnInitializedAsync()
    {
        // SignalRのHub接続を生成
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/batchhub"))
            .Build();

        // サーバー側(Hub)からCallされる関数を定義
        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            messages.Add(message);
            InvokeAsync(StateHasChanged);
        });

        // Hub接続を開始
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            // サーバー側(Hub)のメソッドを実行
            await hubConnection.SendAsync("BulkUpdateAsync", userInput ?? 10);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            // Hub接続を切断
            await hubConnection.DisposeAsync();
        }
    }

    // Hub接続できているかどうか
    private bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;
}